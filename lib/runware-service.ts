interface RunwareRequest {
  photoUrl: string;
  prompt?: string;
  style?: string;
  aspectRatio?: string;
}

interface RunwareResponse {
  success: boolean;
  data?: {
    id: string;
    images: Array<{
      id: string;
      url: string;
      width: number;
      height: number;
    }>;
  };
  error?: string;
}

class RunwareService {
  private static readonly API_URL = 'https://api.runware.ai/v1/generate';
  private static readonly TIMEOUT_MS = 30000; // 30 seconds

  /**
   * Generate poster images using Runware API
   */
  static async generatePoster(request: RunwareRequest): Promise<RunwareResponse> {
    const apiKey = process.env.RUNWARE_API_KEY;
    
    if (!apiKey) {
      return {
        success: false,
        error: 'Runware API key not configured'
      };
    }

    if (!request.photoUrl) {
      return {
        success: false,
        error: 'Photo URL is required'
      };
    }

    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'runware-1.0',
          prompt: request.prompt || 'Create a professional speaker poster with military theme, clean and inspiring design',
          image: request.photoUrl,
          style: request.style || 'professional',
          aspectRatio: request.aspectRatio || '4:5',
          numImages: 1,
          quality: 'high'
        }),
        signal: AbortSignal.timeout(this.TIMEOUT_MS)
      });

      if (!response.ok) {
        const errorText = await response.text();
        return {
          success: false,
          error: `Runware API error: ${response.status} - ${errorText}`
        };
      }

      const data = await response.json();
      
      if (!data.success || !data.data?.images?.length) {
        return {
          success: false,
          error: 'No images generated by Runware'
        };
      }

      return {
        success: true,
        data: {
          id: data.data.id,
          images: data.data.images.map((img: any) => ({
            id: img.id,
            url: img.url,
            width: img.width || 1080,
            height: img.height || 1350
          }))
        }
      };

    } catch (error) {
      console.error('Runware API call failed:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      };
    }
  }

  /**
   * Check if Runware is available (API key configured)
   */
  static isAvailable(): boolean {
    return !!process.env.RUNWARE_API_KEY;
  }

  /**
   * Get feature flag status
   */
  static isEnabled(): boolean {
    const envFlag = process.env.NEXT_PUBLIC_RUNWARE_ENABLED;
    if (envFlag === 'false') return false;
    if (envFlag === 'true') return true;
    
    // Default to true if API key is present
    return this.isAvailable();
  }
}

export { RunwareService };
