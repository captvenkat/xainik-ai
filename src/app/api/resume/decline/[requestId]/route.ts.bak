import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabaseClient'
import { Resend } from 'resend'
import { verifyToken } from '@/lib/tokens'

const resend = new Resend(process.env.RESEND_API_KEY)

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ requestId: string }> }
) {
  const { requestId } = await params
  const supabase = createClient()
  
  try {
    // Verify HMAC token
    const token = request.nextUrl.searchParams.get('token')
    if (!token) {
      return NextResponse.json(
        { error: 'Missing authorization token' },
        { status: 401 }
      )
    }

    const payload = verifyToken(token)
    if (!payload || payload.requestId !== params.requestId || payload.purpose !== 'resume_decline') {
      return NextResponse.json(
        { error: 'Invalid or expired token' },
        { status: 401 }
      )
    }

    // Get the resume request with all related data
    const { data: resumeRequest, error: requestError } = await supabase
      .from('resume_requests')
      .select(`
        id,
        status,
        message,
        created_at,
        pitch_id,
        recruiter_id,
        veteran_id,
        responded_at,
        pitches!inner(
          title,
          profiles!inner(
            id,
            full_name
          )
        ),
        profiles!resume_requests_recruiter_id_fkey(
          full_name,
          email
        )
      `)
      .eq('id', params.requestId)
      .single()

    if (requestError || !resumeRequest) {
      return NextResponse.json(
        { error: 'Resume request not found' },
        { status: 404 }
      )
    }

    if (resumeRequest.status !== 'pending') {
      return NextResponse.json(
        { error: 'Request already processed' },
        { status: 400 }
      )
    }

    if (resumeRequest.responded_at) {
      return NextResponse.json(
        { error: 'Request already responded to' },
        { status: 400 }
      )
    }

    // Update request status to declined and set responded_at
    const { error: updateError } = await supabase
      .from('resume_requests')
      .update({ 
        status: 'declined',
        declined_at: new Date().toISOString(),
        responded_at: new Date().toISOString()
      })
      .eq('id', params.requestId)

    if (updateError) {
      throw new Error('Failed to update request status')
    }

    // Notify recruiter that request was declined
    const recruiter = resumeRequest.profiles
    
    try {
      await resend.emails.send({
        from: 'Xainik <noreply@xainik.com>',
        to: recruiter.email,
        subject: `Resume Request Declined: ${resumeRequest.pitches.title}`,
        html: `
          <h2>Resume Request Declined</h2>
          <p>Your resume request for <strong>${resumeRequest.pitches.title}</strong> has been declined.</p>
          <p><strong>Veteran:</strong> ${resumeRequest.pitches.profiles.full_name}</p>
          ${resumeRequest.message ? `<p><strong>Your message:</strong> ${resumeRequest.message}</p>` : ''}
          <p>We encourage you to continue browsing other veteran profiles on Xainik to find suitable candidates.</p>
        `
      })
    } catch (emailError) {
      console.error('Failed to send decline notification:', emailError)
    }

    // Redirect to success page
    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_SITE_URL}/resume-request/success?status=declined`
    )

  } catch (error) {
    console.error('Error declining resume request:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
